name: Publish Docker Image

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  schedule:
    - cron: '37 8 1,15 * *'
  push:
    branches: [ master ]
    paths-ignore: [ '.github/**' ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build version tag
      - name: Get version tag
        id: versiontag
        # run: echo "::set-output name=versiontag::$(date +'%Y.%m.%d.%H%M%S')"
        # run: echo "versiontag=$(date +'%Y.%m.%d.%H%M%S')" >> $GITHUB_OUTPUT
        run: |
          echo "versiontag=$(
            eval "$(date +'today=%F SYM_VER_PREFIX=%Y.%m.%d now=%s')"
            eval "$(date -d "${today} 0" +'midnight=%s')"
            SYM_VER_PATCH=$((now - midnight))
            echo "${SYM_VER_PREFIX}.${SYM_VER_PATCH}"
          )" >> $GITHUB_OUTPUT

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # set latest tag for master branch
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ steps.versiontag.outputs.versiontag }},enable={{is_default_branch}}

      # Get the latest release commit hash
      - name: Get the latest release info
        id: latest-release
        run: |
          curl -sL https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r ".target_commitish" > latest_release_commit.txt
          echo 'Latest release commit hash:' $(cat latest_release_commit.txt)

      # Get current commit hash
      - name: Get current commit hash
        id: current-commit
        run: echo "current_commit=${GITHUB_SHA}" >> $GITHUB_OUTPUT

      # Compare the commit hashes
      - name: Check if latest release is from the same commit
        id: release-needed
        run: |
          latest_release_commit=$(cat latest_release_commit.txt)
          if [ "${{ steps.current-commit.outputs.current_commit }}" = "$latest_release_commit" ]; then
            echo "No release needed, commits are the same"
            echo "release_needed=false" >> $GITHUB_ENV
          else
            echo "New release needed"
            echo "release_needed=true" >> $GITHUB_ENV
          fi

      # Tag commit with version number
      # https://github.com/actions/github-script
      - name: Tag commit with version number
        if: ${{ always() && format('refs/heads/{0}', github.event.repository.default_branch) == github.ref }}
        uses: actions/github-script@v7.0.1
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ steps.versiontag.outputs.versiontag }}',
              sha: context.sha
            })
      
      # Retrieve all repository tags from the GitHub API using undocumented API call to get all tags
      # https://github.com/actions/github-script
      - name: Get all tags
        id: all-tags
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const path = "/repos/" + "${{ github.repository }}" + "/tags"
            const parameters = "{'" + "${{ github.repository_owner }}" + "', '" + "${{ github.repository }}" + "'}"
            return github.rest.git.getTag(path,parameters)
      
      # Prepare JSON output for Unix command line
      # https://github.com/mad9000/actions-find-and-replace-string
      - name: Format jq result
        id: formatted-jq
        uses: mad9000/actions-find-and-replace-string@5
        with:
          source: ${{ steps.all-tags.outputs.result }}
          find: "'"
          replace: "\\\'"

      # Parse Github API output and search for tags only matching the current commit SHA 
      - name: Search all tags for commit
        id: tag-results
        run: echo tags="$( echo '${{ steps.formatted-jq.outputs.value }}' | jq -r ".data | .[] | select( .commit.sha == \"${{ github.sha }}\" ) | .name" )" >> $GITHUB_OUTPUT
      
      # Merge the tag lists from docker/metadata-action and GitHub API
      - name: Build tag list
        id: tag-list
        run: |
          echo tags="$(
            echo -n "${{ steps.meta.outputs.tags }}" | tr '\n' ','
            for r in `echo "${{ steps.tag-results.outputs.tags }}" | tr '\n' ' '`; do
              echo -n ,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$r | tr '[:upper:]' '[:lower:]'
            done
            # Add the master tag if the branch is master
            if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
              echo -n ,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:master | tr '[:upper:]' '[:lower:]'
            fi
          )" >> $GITHUB_OUTPUT

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@v5.3.0
        with:
          # context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.tag-list.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Create GitHub Release only if needed
      - name: Create GitHub Release
        if: env.release_needed == 'true'
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.versiontag.outputs.versiontag }}
          release_name: "Release ${{ steps.versiontag.outputs.versiontag }}"
          body: "Automatically generated release."
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
